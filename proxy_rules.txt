    1. Должен поддерживаться HTTP 1.0. Прокси должен корректно информировать как клиента, так и сервер об используемой версии протокола

    2. Клиенты и серверы HTTP 0.9 (даже если таковые удастся найти) могут не поддерживаться, 
    т.е. прокси может отказываться работать с ними, либо работа с ними может осуществляться в режиме HTTP 1.0. 
    Возникающие при этом проблемы не являются основанием для отказа в приеме задания.

    3. Поддержка HTTP 1.1 не обязательна. Поддерживать персистентные соединения 1.1 не требуется.

    4. Необходимо поддерживать операцию GET. Поддержка всех остальных операций опциональна; отказ поддерживать остальные операции не является основанием для отказа в приеме задания. 
    Ответы на операции PUT и POST, если сами эти операции будут реализованы, кэшировать не следует.

    5. Кэшировать надлежит только ответы типа 200 (нормальная передача страницы). Все остальные ответы следует передавать браузеру без изменений и кэшировать не следует.

    6. Кэшировать следует как текстовые, так и бинарные ресурсы, с обязательным сохранением MIME типа ресурса.

    7. Кэш хранится в памяти и может полностью теряться при перезапуске прокси.

    8. Обработка полей заголовка, управляющих кэшированием, таких, как last modified и pragma no cache, не обязательна. 
    Некорректная работа сайтов с динамическим HTML, обусловленная некорректной обработкой этих параметров, не является основанием для отказа в приеме задания.

    9. Поддержка cookies не обязательна. Некорректная работа сайтов, использующих cookie (в том числе и для авторизации) не является основанием для отказа в приеме задания

    10. Поддержка любых механизмов авторизации на сайтах не обязательна. Проверяется только корректность анонимного доступа.

    11. Допускается как самостоятельная реализация анализа заголовка HTTP, так и использование third-party библиотек парсеров заголовка.
    	Note: Лучше взять что-то уже готовое. Например взять вот этот https://github.com/h2o/picohttpparser.

    12. Допускается использование языков C и C++ 
	Note: Но если вы собираетесь писать на плюсах как на си, с голыми указателями и без шаблонов/ооп, то задумайтесь еще 10 раз, а стоит ли оно того..
    
    13. Все варианты задания предполагают параллельную обработку запросов, т.е. при тестировании необходимо продемонстрировать возможность открыть несколько клиентских сессий и показать, 
    что ни одна из сессий не ждет завершения операции ни одной из других сессий.
    
    14. Стандартной реализации асинхронных DNS запросов не существует, поэтому задержки на gethostbyname(3C) в однопоточном прокси допустимы.
    
    15. Прокси не должны иметь ограничений по количеству клиентских сессий (кроме количества дескрипторов открытых файлов). 
    Т.е. при наличии пула надо уметь поддерживать больше сессий, чем имеется потоков в пуле.
    
    16. Если пула нет, реализация имеет право отвергать или задерживать входящие соединения при невозможности создать новый поток.
    
    17. Если две клиентские сессии скачивают одну и ту же страницу, необходимо, чтобы обе сессии работали с одной и той же записью кэша, понимали, 
    что запись неполная и адекватно реагировали на докачку.
    
    18. Прокси должен корректно обрабатывать сброс клиентских сессий. В том числе, в случае, когда две или более сессий работали с одной записью кэша, 
    после сброса одной из них, остальные сессии должны корректно продолжить докачку страницы.
    
    19 Допускается создание двух потоков на каждое клиентское соединение: «клиентский» поток обрабатывает соединение с клиентом, «серверный» – с сервером. 
    При работе двух клиентских сессий с одной записью кэша при этом следует создавать два клиентских потока, но один серверный. При передаче клиенту полной записи кэша, 
    серверный поток можно не запускать. В случае пула потоков, допускается разделение пула на два, серверных и клиентских потоков, исполняющих разный код.
    
    20. При сбросе единственной сессии, работавшей с записью кэша, допускается как сброс докачки страницы и уничтожение записи в кэше, так и фоновое продолжение докачки. 
    Преподаватель имеет право потребовать изменения стратегии обработки этой ситуации, т.е. потребовать переделать сброс докачки на ее фоновое продолжение или наоборот 
    (это может быть полезно для проверки корректности управления записями в кэше).
    
    Note: скорее всего, преподаватель не будет требовать изменения стратегии.
    
    21. Использование явных и неявных холостых циклов, а в особенности холостых циклов с ожиданием, для синхронизации потоков не допускается. 
    Допускается использование стандартных примитивов синхронизации pthread, системных вызовов select и poll и вызовов асинхронного ввода-вывода.
    
    22. В частности, высокая загрузка процессора (по показаниям top) при малой активности соединений интерпретируется 
    как явный или неявный холостой цикл и является основанием для отказа в приеме задания. При обнаружении такого поведения, 
    преподаватель имеет право потребовать доказательства корректности используемой схемы синхронизации.
    
    Note: если при паре клиентов прокси улетает в 30%, что-то не так. Преподаватель тогда потребует, это точно..
    
    23. Задержки при открытии сайтов интерпретируются как холостой цикл с ожиданием, и являются основанием для отказа в приеме задания.
    
    24. Вызовы функций sleep, usleep, pause и т.д. в коде приложения интерпретируются как холостой цикл с ожиданием и являются основанием для отказа в приеме задания.
    
    25. Трудновоспроизводимые «глюки» при работе прокси интерпретируются как ошибки соревнования, и являются основанием для отказа в приеме задания. 
    После обнаружения таких «глюков» преподаватель имеет право потребовать доказательства корректности используемой схемы синхронизации.

    Новые правила:
    26. Кэш должен уметь продолжать работать после заполнения. Или аллоцируйте на лету еще один сегмент, 
    или пилите примитивный garbage collector, удаляющий ненужные записи. что-то простое, вроде LRU - подойдет
    
    27. В любом случае, GC или аллокация должны быть в отдельном потоке, и не должны мешать работе прокси. 
    Т.е. условный монитор следит за кэшем, чтобы всегда было место для записи.
    
    28. Если запрашивается файл больше вместимости кэша, допускается ожидание его расширения либо сброс запроса с логированием ошибки
    
    29. Реализовывать TTL не обязательно
    
    30. Если запись уже есть в кэше, ходить на сервер и спрашивать last updated не обязательно


