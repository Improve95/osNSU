file = open() возвращает файловый декриптор

inode - структура где хранятся вся информация о файле
хранит метаданные и указатели на функции, которые что то делают с файлом

файловая система хранит укзатель на функцию read (к примеру)
inode хранит указатель на read

open() делает системный вызов sys_open, уровень над файловой системой (VFS)
sys_open() {
    while() {
        идем по пути от корня

        получаем dentry
        получаем inode
        lookup(inode, dir1,...); ищет файлы и каталоги, возвращает новый indode есил нашел dir1

        ...

        в конце цикла вызывает read для файла (или write или что то еще)
    } 
}

если директория является точкой монтирования, то он переключается на другую файловую систему
имя файла - жесткая ссылка
пока на него кто-то ссылается - файл существует
жесткая ссылка ссылается на inode
например . ..

символьная ссылка - сслыка на файл, можно сделать ссылку на другую файловую систему,
там прописан полный путь к файлу


когда хотим записать в файл:

идем по файловому дискриптору находим указатель на структуру нужного нам файла получаем inode
файл может быть отображен либо в оперативке либо его там не будет, за это отвечает файл
page_map, тот самый, в нем есть бит который отвечает, есть ли трансляция данной страницы или нет.
в inode есть указатель который указывает на список всех страниц связанных с файлом, далее, если страницы нет, и если 
его никто до меня не читал, то указатель в inode указывает на пустой массив, значит нам нужен прочитать файл с диска,
для этого есть механихм adress_space, в нем есть функция read_page, ну и она получается заведет новую страницу в памяти, 
заведет новую
структуру page и уже читает

после того как мы записали файл, то есть два пути
после write можно сразу вызвать fsync и все страницы которые помечены битом dirty (означает что страница в опертивке
не соответствует странице на диске) или сама операционка будет переодически проходить страницы и записывать их на диск

разница между private and shared при мапирование с файлом:
у файла были страницы, мы его привязали к региону процесса, если модимикатор шаред, то запись продолжится в эти же 
страницы, если же модификатор привате, то при попытке записать в существующую страницу произойдет система 
копи он врайт, и страница никогда не будет записана на диск